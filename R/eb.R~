#' Extract elements using brackets
#'
#' These utility functions provide simple wrappers for extracting elements
#' from lists, data frames, or vectors using single (`[`) or double (`[[`) brackets.
#'
#' - `eb1()` uses single brackets (`[`) and returns a **subset**, usually of the same type as `x`.
#' - `eb2()` uses double brackets (`[[`) and returns the **element itself**, not a subset.
#'
#' These are especially useful when writing pipe-friendly or programmatic code where
#' `$` is either not available or not reliable.
#'
#' @param x A list, data frame, or vector.
#' @param which The index or name of the element(s) to extract.
#'
#' @return
#' - `eb1()` returns a subset of `x`.
#' - `eb2()` returns a single element from `x`.
#'
#' @examples
#' lst <- list(a = 1:3, b = 4:6)
#'
#' eb1(lst, "a")        # Returns a list with element 'a'
#' eb2(lst, "a")        # Returns the vector 1:3
#'
#' eb1(lst, 2)          # List containing the second element
#' eb2(lst, 2)          # The second element itself
#'
#' df <- data.frame(x = 1:5, y = letters[1:5])
#' eb1(df, "y")         # A data frame with just the 'y' column
#' eb2(df, "y")         # The 'y' column as a vector
#'
#' @name eb_bracket_access
#' @aliases eb1 eb2
#' @export
eb1 <- function(x, which) {
  x[which]
}

#' @rdname eb_bracket_access
#' @export
eb2 <- function(x, which) {
  x[[which]]
}
